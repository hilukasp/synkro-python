#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
#• Mineração de dados – padrões
# objeto processo
install.packages("jsonlite")
install.packages("jsonlite")
# Pegar o texto da coluna com os processos
processos_txt <- dados.mainframe$processos
#Substituir aspas simples por aspas duplas para formar JSON válido
processos_txt_corrigido <- gsub("'", '"', processos_txt)
#Converter para lista
#distribuicao<-sample(dados.mainframe,size = 500,replace = TRUE) comando para distribuir os dados com base em csv já existente
################distribuindo dados######################
# Garantir que timestamp é POSIXct (mantém tipo de data)
dados.mainframe$timestamp<-as.POSIXct(
dados.mainframe$timestamp,
format = "%d-%m-%Y %H:%M:%S",
tz = "America/Sao_Paulo"
)
# Número de novas linhas
n_novas_linhas <- 1318
# Amostra com reposição
amostra <- dados.mainframe[sample(1:nrow(dados.mainframe), size = n_novas_linhas, replace = TRUE), ]
# Ordenar
amostra <- amostra[order(amostra$timestamp), ]
# Criar timestamps novos variando de hora em hora
ultimo_tempo <- max(dados.mainframe$timestamp)
amostra$timestamp <- seq(from = ultimo_tempo + 3600, by = 3600, length.out = n_novas_linhas)
# Juntar tudo
janeiro <- rbind(dados.mainframe, amostra)
#  formata a data sem o fuzo horário
janeiro$timestamp<-format(janeiro$timestamp, "%d-%m-%Y %H:%M:%S")
janeiro$timestamp
# Simulaçao regra de negocio
perc_fev <- -0.069
perc_mar <-  0.026
perc_abr <- 0.0436
perc_mai <- -0.0235
perc_jun <- -0.0853
perc_jul <- 0.0870
perc_ago <- -0.0307
perc_set <- -0.0215
perc_out <- 0.0235
perc_nov <- -0.0422
perc_dez <- 0.1409
fevereiro<- janeiro
diferenca <- perc_fev
coluna = fevereiro$uso_cpu_total_.
fevereiro$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- fevereiro$uso_ram_total_.
fevereiro$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- fevereiro$uso_disco_total_.
fevereiro$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- fevereiro$tempo_cpu_ociosa
fevereiro$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- fevereiro$disco_read_count
fevereiro$disco_read_count = (coluna + (coluna * diferenca))
coluna <- fevereiro$disco_write_count
fevereiro$disco_write_count = (coluna + (coluna * diferenca))
coluna <- fevereiro$disco_throughput_mbs
fevereiro$disco_throughput_mbs = (coluna + (coluna * diferenca))
marco <- fevereiro
diferenca <- perc_mar
coluna = marco$uso_cpu_total_.
marco$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- marco$uso_ram_total_.
marco$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- marco$uso_disco_total_.
marco$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- marco$tempo_cpu_ociosa
marco$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- marco$disco_read_count
marco$disco_read_count = (coluna + (coluna * diferenca))
coluna <- marco$disco_write_count
marco$disco_write_count = (coluna + (coluna * diferenca))
coluna <- marco$disco_throughput_mbs
marco$disco_throughput_mbs = (coluna + (coluna * diferenca))
abril <- marco
diferenca <- perc_abr
coluna = abril$uso_cpu_total_.
abril$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- abril$uso_ram_total_.
abril$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- abril$uso_disco_total_.
abril$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- abril$tempo_cpu_ociosa
abril$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- abril$disco_read_count
abril$disco_read_count = (coluna + (coluna * diferenca))
coluna <- abril$disco_write_count
abril$disco_write_count = (coluna + (coluna * diferenca))
coluna <- abril$disco_throughput_mbs
abril$disco_throughput_mbs = (coluna + (coluna * diferenca))
maio <- abril
diferenca <- perc_mai
coluna = maio$uso_cpu_total_.
maio$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- maio$uso_ram_total_.
maio$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- maio$uso_disco_total_.
maio$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- maio$tempo_cpu_ociosa
maio$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- maio$disco_read_count
maio$disco_read_count = (coluna + (coluna * diferenca))
coluna <- maio$disco_write_count
maio$disco_write_count = (coluna + (coluna * diferenca))
coluna <- maio$disco_throughput_mbs
maio$disco_throughput_mbs = (coluna + (coluna * diferenca))
junho <- maio
diferenca <- perc_jun
coluna = junho$uso_cpu_total_.
junho$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- junho$uso_ram_total_.
junho$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- junho$uso_disco_total_.
junho$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- junho$tempo_cpu_ociosa
junho$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- junho$disco_read_count
junho$disco_read_count = (coluna + (coluna * diferenca))
coluna <- junho$disco_write_count
junho$disco_write_count = (coluna + (coluna * diferenca))
coluna <- junho$disco_throughput_mbs
junho$disco_throughput_mbs = (coluna + (coluna * diferenca))
julho <- junho
diferenca <- perc_jul
coluna = julho$uso_cpu_total_.
julho$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- julho$uso_ram_total_.
julho$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- julho$uso_disco_total_.
julho$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- julho$tempo_cpu_ociosa
julho$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- julho$disco_read_count
julho$disco_read_count = (coluna + (coluna * diferenca))
coluna <- julho$disco_write_count
julho$disco_write_count = (coluna + (coluna * diferenca))
coluna <- julho$disco_throughput_mbs
julho$disco_throughput_mbs = (coluna + (coluna * diferenca))
agosto <- julho
diferenca <- perc_ago
coluna = agosto$uso_cpu_total_.
agosto$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- agosto$uso_ram_total_.
agosto$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- agosto$uso_disco_total_.
agosto$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- agosto$tempo_cpu_ociosa
agosto$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- agosto$disco_read_count
agosto$disco_read_count = (coluna + (coluna * diferenca))
coluna <- agosto$disco_write_count
agosto$disco_write_count = (coluna + (coluna * diferenca))
coluna <- agosto$disco_throughput_mbs
agosto$disco_throughput_mbs = (coluna + (coluna * diferenca))
setembro <- agosto
diferenca <- perc_set
coluna = setembro$uso_cpu_total_.
setembro$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- setembro$uso_ram_total_.
setembro$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- setembro$uso_disco_total_.
setembro$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- setembro$tempo_cpu_ociosa
setembro$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- setembro$disco_read_count
setembro$disco_read_count = (coluna + (coluna * diferenca))
coluna <- setembro$disco_write_count
setembro$disco_write_count = (coluna + (coluna * diferenca))
coluna <- setembro$disco_throughput_mbs
setembro$disco_throughput_mbs = (coluna + (coluna * diferenca))
outubro <- setembro
diferenca <- perc_out
coluna = outubro$uso_cpu_total_.
outubro$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- outubro$uso_ram_total_.
outubro$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- outubro$uso_disco_total_.
outubro$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- outubro$tempo_cpu_ociosa
outubro$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- outubro$disco_read_count
outubro$disco_read_count = (coluna + (coluna * diferenca))
coluna <- outubro$disco_write_count
outubro$disco_write_count = (coluna + (coluna * diferenca))
coluna <- outubro$disco_throughput_mbs
outubro$disco_throughput_mbs = (coluna + (coluna * diferenca))
novembro <- outubro
diferenca <- perc_nov
coluna = novembro$uso_cpu_total_.
novembro$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- novembro$uso_ram_total_.
novembro$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- novembro$uso_disco_total_.
novembro$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- novembro$tempo_cpu_ociosa
novembro$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- novembro$disco_read_count
novembro$disco_read_count = (coluna + (coluna * diferenca))
coluna <- novembro$disco_write_count
novembro$disco_write_count = (coluna + (coluna * diferenca))
coluna <- novembro$disco_throughput_mbs
novembro$disco_throughput_mbs = (coluna + (coluna * diferenca))
dezembro <- novembro
diferenca <- perc_dez
coluna = dezembro$uso_cpu_total_.
dezembro$uso_cpu_total_. = (coluna + (coluna * diferenca ))
coluna <- dezembro$uso_ram_total_.
dezembro$uso_ram_total_. = (coluna + (coluna * diferenca ))
coluna <- dezembro$uso_disco_total_.
dezembro$uso_disco_total_. = (coluna + (coluna * diferenca))
coluna <- dezembro$tempo_cpu_ociosa
dezembro$tempo_cpu_ociosa = (coluna - (coluna * diferenca))
coluna <- dezembro$disco_read_count
dezembro$disco_read_count = (coluna + (coluna * diferenca))
coluna <- dezembro$disco_write_count
dezembro$disco_write_count = (coluna + (coluna * diferenca))
coluna <- dezembro$disco_throughput_mbs
dezembro$disco_throughput_mbs = (coluna + (coluna * diferenca))
ano <- bind_rows(janeiro,fevereiro,marco,abril,maio,junho,julho,agosto,setembro,outubro,novembro,dezembro)
ano$mes <- factor(c(rep("Janeiro", nrow(janeiro)),
rep("Fevereiro", nrow(fevereiro)),
rep("Março", nrow(marco)),
rep("Abril", nrow(abril)),
rep("Maio", nrow(maio)),
rep("Junho", nrow(junho)),
rep("Julho", nrow(julho)),
rep("Agosto", nrow(agosto)),
rep("Setembro", nrow(setembro)),
rep("Outubro", nrow(outubro)),
rep("Novembro", nrow(novembro)),
rep("Dezembro", nrow(dezembro))),
levels = c("Janeiro","Fevereiro","Março","Abril","Maio","Junho",
"Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"))
resumo <- ano %>%
group_by(mes) %>%
summarise(media_cpu = mean(uso_cpu_total_., na.rm = TRUE))
ggplot(resumo, aes(x = mes, y = media_cpu, group = 1)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "Uso médio de CPU por mês",
x = "Mês", y = "Uso médio de CPU (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#• Gráfico/Dashboard/Ranking
#• Definição das métricas (Dimensões)
#• Definição de Alertas
#>90% processador <5%
#>85% memoria
#>90% usodisco
#>rankeando os maiores processos
#>cpu tempo
#>hist cpu,
#hist ram,
#processos q mais gastam recursos,
#media uso recurso por dia\mês\ano?
#fazer uma curva linear de previsão de gasto de recurso.
#tentar prever perdas conforme documentação.
#processos que estão aumentando ou diminuindo seu uso com o tempo?
ggplot(resumo, aes(x = mes, y = media_cpu, group = 1)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "Tendência do Uso Médio de CPU ao Longo do Ano",
x = "Mês", y = "Uso médio de CPU (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(resumo, aes(x = mes, y = media_cpu, group = 1)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "Tendência do Uso Médio de CPU ao Longo do Ano",
x = "Mês", y = "Uso médio de CPU (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(top_3_maior_uso)
# Top 3 meses com maior uso médio de CPU
top_3_maior_uso <- resumo %>%
arrange(desc(media_cpu)) %>%
slice(1:3)
print(top_3_maior_uso)
print(correlacoes)
# Cálculo de correlação entre as principais métricas, por mês
correlacoes <- ano %>%
group_by(mes) %>%
summarise(cor_cpu_ram   = cor(uso_cpu_total_., uso_ram_total_., use = "complete.obs"),
cor_cpu_disco = cor(uso_cpu_total_., uso_disco_total_., use = "complete.obs"),
cor_cpu_ociosa = cor(uso_cpu_total_., tempo_cpu_ociosa, use = "complete.obs"))
print(correlacoes)
resumo_melt <- melt(resumo_multivariado, id.vars = "mes")
install.packages("reshape2")
library(reshape2)
# Médias mensais de várias métricas para identificar gargalos simultâneos
resumo_multivariado <- ano %>%
group_by(mes) %>%
summarise(cpu = mean(uso_cpu_total_., na.rm = TRUE),
ram = mean(uso_ram_total_., na.rm = TRUE),
disco = mean(uso_disco_total_., na.rm = TRUE),
throughput = mean(disco_throughput_mbs, na.rm = TRUE))
resumo_melt <- melt(resumo_multivariado, id.vars = "mes")
ggplot(resumo_melt, aes(x = mes, y = value, color = variable, group = variable)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Comparação das Métricas de Carga do Sistema por Mês",
x = "Mês", y = "Média",
color = "Métrica") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot do índice de carga
ggplot(resumo_indice, aes(x = mes, y = indice_carga, group = 1)) +
geom_line(color = "firebrick", size = 1.3) +
geom_point(size = 3, color = "darkred") +
labs(title = "Índice de Carga do Sistema por Mês",
x = "Mês", y = "Índice de carga (padronizado)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(resumo_indice %>% arrange(desc(indice_carga)))
# Plot do índice de carga
ggplot(resumo_indice, aes(x = mes, y = indice_carga, group = 1)) +
geom_line(color = "firebrick", size = 1.3) +
geom_point(size = 3, color = "darkred") +
labs(title = "Índice de Carga do Sistema por Mês",
x = "Mês", y = "Índice de carga (padronizado)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(resumo_indice %>% arrange(desc(indice_carga)))
resumo_indice <- ano %>%
group_by(mes) %>%
summarise(cpu = mean(uso_cpu_total_., na.rm = TRUE),
ram = mean(uso_ram_total_., na.rm = TRUE),
disco = mean(uso_disco_total_., na.rm = TRUE),
io = mean(disco_read_count + disco_write_count, na.rm = TRUE),
throughput = mean(disco_throughput_mbs, na.rm = TRUE)) %>%
mutate(indice_carga = rescale(cpu) + rescale(ram) + rescale(disco) +
rescale(io) + rescale(throughput))
# Plot do índice de carga
ggplot(resumo_indice, aes(x = mes, y = indice_carga, group = 1)) +
geom_line(color = "firebrick", size = 1.3) +
geom_point(size = 3, color = "darkred") +
labs(title = "Índice de Carga do Sistema por Mês",
x = "Mês", y = "Índice de carga (padronizado)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(resumo_indice %>% arrange(desc(indice_carga)))
# Padronizar colunas e criar índice
library(scales)
resumo_indice <- ano %>%
group_by(mes) %>%
summarise(cpu = mean(uso_cpu_total_., na.rm = TRUE),
ram = mean(uso_ram_total_., na.rm = TRUE),
disco = mean(uso_disco_total_., na.rm = TRUE),
io = mean(disco_read_count + disco_write_count, na.rm = TRUE),
throughput = mean(disco_throughput_mbs, na.rm = TRUE)) %>%
mutate(indice_carga = rescale(cpu) + rescale(ram) + rescale(disco) +
rescale(io) + rescale(throughput))
# Plot do índice de carga
ggplot(resumo_indice, aes(x = mes, y = indice_carga, group = 1)) +
geom_line(color = "firebrick", size = 1.3) +
geom_point(size = 3, color = "darkred") +
labs(title = "Índice de Carga do Sistema por Mês",
x = "Mês", y = "Índice de carga (padronizado)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(resumo_indice %>% arrange(desc(indice_carga)))
#• Mineração de dados – padrões
# objeto processo
install.packages("jsonlite")
install.packages("jsonlite")
